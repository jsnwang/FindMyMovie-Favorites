// Generated by view binder compiler. Do not edit!
package com.example.feature_search.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SearchView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.feature_search.R;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSearchBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialCardView cvQuery;

  @NonNull
  public final Guideline glEnd;

  @NonNull
  public final Guideline glStart;

  @NonNull
  public final CircularProgressIndicator loading;

  @NonNull
  public final RecyclerView rvResults;

  @NonNull
  public final SearchView svQuery;

  @NonNull
  public final MaterialTextView tvNoQuery;

  private FragmentSearchBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialCardView cvQuery, @NonNull Guideline glEnd, @NonNull Guideline glStart,
      @NonNull CircularProgressIndicator loading, @NonNull RecyclerView rvResults,
      @NonNull SearchView svQuery, @NonNull MaterialTextView tvNoQuery) {
    this.rootView = rootView;
    this.cvQuery = cvQuery;
    this.glEnd = glEnd;
    this.glStart = glStart;
    this.loading = loading;
    this.rvResults = rvResults;
    this.svQuery = svQuery;
    this.tvNoQuery = tvNoQuery;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSearchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSearchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_search, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSearchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cv_query;
      MaterialCardView cvQuery = ViewBindings.findChildViewById(rootView, id);
      if (cvQuery == null) {
        break missingId;
      }

      id = R.id.gl_end;
      Guideline glEnd = ViewBindings.findChildViewById(rootView, id);
      if (glEnd == null) {
        break missingId;
      }

      id = R.id.gl_start;
      Guideline glStart = ViewBindings.findChildViewById(rootView, id);
      if (glStart == null) {
        break missingId;
      }

      id = R.id.loading;
      CircularProgressIndicator loading = ViewBindings.findChildViewById(rootView, id);
      if (loading == null) {
        break missingId;
      }

      id = R.id.rv_results;
      RecyclerView rvResults = ViewBindings.findChildViewById(rootView, id);
      if (rvResults == null) {
        break missingId;
      }

      id = R.id.sv_query;
      SearchView svQuery = ViewBindings.findChildViewById(rootView, id);
      if (svQuery == null) {
        break missingId;
      }

      id = R.id.tv_no_query;
      MaterialTextView tvNoQuery = ViewBindings.findChildViewById(rootView, id);
      if (tvNoQuery == null) {
        break missingId;
      }

      return new FragmentSearchBinding((ConstraintLayout) rootView, cvQuery, glEnd, glStart,
          loading, rvResults, svQuery, tvNoQuery);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
